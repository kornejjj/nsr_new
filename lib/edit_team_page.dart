import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:image_picker/image_picker.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'dart:io';
import 'bottom_nav_bar.dart'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º BottomNavBar
import 'team_selection_page.dart'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TeamSelectionPage

class EditTeamPage extends StatefulWidget {
  final String teamId;

  const EditTeamPage({super.key, required this.teamId});

  @override
  _EditTeamPageState createState() => _EditTeamPageState();
}

class _EditTeamPageState extends State<EditTeamPage> {
  String teamName = "Loading...";
  String teamAvatarUrl = "";
  final TextEditingController _teamNameController = TextEditingController();
  int _currentIndex = 2; // –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –¥–ª—è BottomNavBar
  bool _isLoading = true; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏

  @override
  void initState() {
    super.initState();
    _loadTeamData();
  }

  // üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  Future<void> _loadTeamData() async {
    try {
      final teamDoc = await FirebaseFirestore.instance
          .collection('teams')
          .doc(widget.teamId)
          .get();

      if (teamDoc.exists) {
        setState(() {
          teamName = teamDoc['name'] ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
          teamAvatarUrl = teamDoc['avatar'] ?? "";
          _teamNameController.text = teamName;
          _isLoading = false; // –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        });
      } else {
        setState(() {
          _isLoading = false; // –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        });
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")),
        );
      }
    } catch (e) {
      setState(() {
        _isLoading = false; // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e")),
      );
    }
  }

  // üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∫–æ–º–∞–Ω–¥—ã
  Future<void> _uploadTeamAvatar() async {
    final picker = ImagePicker();
    final XFile? image = await picker.pickImage(source: ImageSource.gallery);
    if (image == null) return;

    setState(() {
      _isLoading = true; // –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏
    });

    try {
      File file = File(image.path);
      Reference storageRef = FirebaseStorage.instance
          .ref()
          .child('teams/${widget.teamId}/avatar.jpg');
      await storageRef.putFile(file);

      String downloadUrl = await storageRef.getDownloadURL();

      await FirebaseFirestore.instance
          .collection('teams')
          .doc(widget.teamId)
          .update({'avatar': downloadUrl});

      setState(() {
        teamAvatarUrl = downloadUrl;
        _isLoading = false; // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      });

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("‚úÖ –§–æ—Ç–æ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")),
      );
    } catch (e) {
      setState(() {
        _isLoading = false; // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("‚ùå –û—à–∏–±–∫–∞: $e")),
      );
    }
  }

  // üìå –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∫–æ–º–∞–Ω–¥—ã
  Future<void> _updateTeamName() async {
    if (_teamNameController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")),
      );
      return;
    }

    setState(() {
      _isLoading = true; // –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    });

    try {
      await FirebaseFirestore.instance
          .collection('teams')
          .doc(widget.teamId)
          .update({'name': _teamNameController.text});

      setState(() {
        teamName = _teamNameController.text;
        _isLoading = false; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
      });

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")),
      );
    } catch (e) {
      setState(() {
        _isLoading = false; // –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("‚ùå –û—à–∏–±–∫–∞: $e")),
      );
    }
  }

  // üìå –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥—É
  Future<void> _leaveTeam() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    setState(() {
      _isLoading = true; // –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    });

    try {
      await FirebaseFirestore.instance
          .collection('teams')
          .doc(widget.teamId)
          .update({
        'members': FieldValue.arrayRemove([user.uid]),
      });

      await FirebaseFirestore.instance
          .collection('users')
          .doc(user.uid)
          .update({'teamId': FieldValue.delete()});

      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => TeamSelectionPage()),
      );

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–∞–Ω–¥—É!")),
      );
    } catch (e) {
      setState(() {
        _isLoading = false; // –û—à–∏–±–∫–∞
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("‚ùå –û—à–∏–±–∫–∞: $e")),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(teamName), // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        backgroundColor: Colors.yellow.shade600,
        elevation: 0,
        automaticallyImplyLeading: false, // –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É –Ω–∞–∑–∞–¥
      ),
      bottomNavigationBar: BottomNavBar(
        currentIndex: _currentIndex,
        onDestinationSelected: (index) {
          setState(() {
            _currentIndex = index;
          });
        },
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator()) // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
          : Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            GestureDetector(
              onTap: _uploadTeamAvatar,
              child: CircleAvatar(
                radius: 60,
                backgroundImage: teamAvatarUrl.isNotEmpty
                    ? NetworkImage(teamAvatarUrl)
                    : const AssetImage("assets/team_logo.png") as ImageProvider,
                child: const Icon(Icons.edit, color: Colors.white),
              ),
            ),
            const SizedBox(height: 20),
            TextField(
              controller: _teamNameController,
              decoration: InputDecoration(
                labelText: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã",
                border: OutlineInputBorder(),
                suffixIcon: IconButton(
                  icon: const Icon(Icons.save),
                  onPressed: _updateTeamName,
                ),
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _leaveTeam,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                foregroundColor: Colors.white,
              ),
              child: const Text("–ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥—É"),
            ),
          ],
        ),
      ),
    );
  }
}